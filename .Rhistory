library(janitor)
population <- population |>
row_to_names(row_number = 1) |>                           #use first row as header
as_tibble() |>                                            #turn into tibble
select(-state) |>                                         #remove state
rename(state_name=NAME)|>                                 #rename NAME
pivot_longer(                                             #turn wide format into long
cols = starts_with("POP_"),
names_to = "year",
values_to = "population"
) |>
mutate(
year = str_remove(year, "POP_"),                        #remove the extra characters from year col
year = as.numeric(year),
population = as.numeric(population)
) |>
mutate(
state = case_when(
state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]       #state.abb <-returns abbreviation
#state.name<-has state names
#both are base R functions
)
)
population <- resp_body_json(response, simplifyVector = TRUE)
#without simplifyVector = TRUE, we would need to do do.call(rbind,...) to manually combine all lists
#with simplifyVector = TRUE, we convert the lists into a matrix. We can do this because each list contains a vector of the same length.
population <- resp_body_json(response, simplifyVector = TRUE)
#without simplifyVector = TRUE, we would need to do do.call(rbind,...) to manually combine all lists
#with simplifyVector = TRUE, we convert the lists into a matrix. We can do this because each list contains a vector of the same length.
population
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- population |>
row_to_names(row_number = 1) |>                           #use first row as header
as_tibble() |>                                            #turn into tibble
select(-state) |>                                         #remove state
rename(state_name=NAME)|>                                 #rename NAME
pivot_longer(                                             #turn wide format into long
cols = starts_with("POP_"),
names_to = "year",
values_to = "population"
) |>
mutate(
year = str_remove(year, "POP_"),                        #remove the extra characters from year col
year = as.numeric(year),
population = as.numeric(population)
) |>
mutate(
state = case_when(
state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]       #state.abb <-returns abbreviation
#state.name<-has state names
#both are base R functions
)
)
population
#population <- population |> ## Use janitor row to names function
# convert to tibble
# remove stat column
# rename state column to state_name
# use pivot_longer to tidy
# remove POP_ from year
# parese all relevant colunns to numeric
# add state abbreviations using state.abb variable
# use case_when to add abbreviations for DC and PR
population |>
mutate(state_name = reorder(state_name, population)) |>      #reorder the state_name by population
ggplot(aes(x=population,y=state_name))+
geom_col()+
coord_flip() +                                       #flip coordinates
facet_wrap(~year) +
labs(
x = "Population Size",
y = "State",
title = "Comparing population size across state"
)
# population |>
# reorder state
# assign aesthetic mapping
# use geom_col to plot barplot
# flip coordinates
# facet by year
#| message: false
#| warning: false
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url,simplifyDataFrame = FALSE)          #read json file, return lists as result
regions <- map_df(regions, as_tibble)|>                     #turn the list into tibble
rename(state_name=states)|>
#rename the column names to match population's column name
filter(state_name %in% c(state.name, "District of Columbia", "Puerto Rico"))
#without filter, the original data would be 59x3
regions
# regions <- use jsonlit JSON parser
# regions <- convert list to data frame. You can use map_df in purrr package
population <- left_join(population, regions, by = "state_name")
population
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api)|> req_perform()
cases_raw <- resp_body_json(cases_raw,simplifyVector = TRUE)
cases_raw
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api)|>
req_url_query(`$limit` = "10000000000") |>                      #added limit in the query request
req_perform()
library(lubridate)
cases_raw <- resp_body_json(cases_raw,simplifyVector = TRUE)
cases_raw<- cases_raw|>
select(state,end_date,new_cases) |>
rename(date=end_date,cases=new_cases) |>                       #rename the columns
mutate(cases=as.numeric(cases),                                #make sure cases are numeric
date = as.Date(date))                                   #as.Date turns into ISO-8061 format
cases_raw
cases <- cases_raw|>
filter(year(date) %in% c(2020, 2021)) |>
mutate(year = year(date)) |>
left_join(population,by = c("state","year"))
#left_join(cases,population,by = c("state","year"))
cases
cases <- cases_raw|>
filter(year(date) %in% c(2020, 2021)) |>
mutate(year = year(date)) |>
left_join(population,by = c("state","year")) |>
mutate(cases_rate= (cases/population)*100000) |>
filter(!is.na(region_name))|>
ggplot(aes(x=date, y=cases_rate,col=state))+
geom_line()+
facet_wrap(~region_name)
cases
cases <- cases_raw|>
filter(year(date) %in% c(2020, 2021)) |>
mutate(year = year(date)) |>
left_join(population,by = c("state","year")) |>
mutate(cases_rate= (cases/population)*100000) |>
filter(!is.na(region_name))|>
ggplot(aes(x=date, y=cases_rate,col=state))+
geom_line()+
facet_wrap(~region_name)+
abs(
title = "Cases per 100,000 by State, Year 2020-2021",
x = "Date",
y = "Cases per 100,000 Population",
color = "State"
) +
cases
cases <- cases_raw|>
filter(year(date) %in% c(2020, 2021)) |>
mutate(year = year(date)) |>
left_join(population,by = c("state","year")) |>
mutate(cases_rate= (cases/population)*100000) |>
filter(!is.na(region_name))|>
ggplot(aes(x=date, y=cases_rate,col=state))+
geom_line()+
facet_wrap(~region_name)+
abs(
title = "Cases per 100,000 by State from 2020 to 2021",
x = "Date",
y = "Cases per 100,000 Population",
color = "State"
) +
cases
cases <- cases_raw|>
filter(year(date) %in% c(2020, 2021)) |>
mutate(year = year(date)) |>
left_join(population,by = c("state","year")) |>
mutate(cases_rate= (cases/population)*100000) |>
filter(!is.na(region_name))|>
ggplot(aes(x=date, y=cases_rate,col=state))+
geom_line()+
facet_wrap(~region_name)+
labs(
title = "Cases per 100,000 by State from 2020 to 2021",
x = "Date",
y = "Cases per 100,000 Population",
color = "State"
) +
cases
cases <- cases_raw|>
filter(year(date) %in% c(2020, 2021)) |>
mutate(year = year(date)) |>
left_join(population,by = c("state","year")) |>
mutate(cases_rate= (cases/population)*100000) |>
filter(!is.na(region_name))|>
ggplot(aes(x=date, y=cases_rate,col=state))+
geom_line()+
facet_wrap(~region_name)+
labs(
title = "Cases per 100,000 by State from 2020 to 2021",
x = "Date",
y = "Cases per 100,000 Population",
color = "State"
)
cases
cases <- cases_raw|>
filter(year(date) %in% c(2020, 2021)) |>
mutate(year = year(date)) |>
left_join(population,by = c("state","year")) |>
mutate(cases_rate= (cases/population)*100000) |>
filter(!is.na(region_name))|>
ggplot(aes(x=date, y=cases_rate,col=state))+
geom_line()+
facet_wrap(~region_name)+
labs(
title = "Cases per 100,000 by State from 2020 to 2021",
x = "Date",
y = "Cases per 100,000 Population",
color = "State"
)
cases
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api)|>
req_url_query(`$limit` = "10000000000") |>                      #added limit in the query request
req_perform()
library(lubridate)
cases_raw <- resp_body_json(cases_raw,simplifyVector = TRUE)
cases<- cases_raw|>
select(state,end_date,new_cases) |>
rename(date=end_date,cases=new_cases) |>                       #rename the columns
mutate(cases=as.numeric(cases),                                #make sure cases are numeric
date = as.Date(date))                                   #as.Date turns into ISO-8061 format
cases
cases|>
filter(year(date) %in% c(2020, 2021)) |>
mutate(year = year(date)) |>
left_join(population,by = c("state","year")) |>
mutate(cases_rate= (cases/population)*100000) |>
filter(!is.na(region_name))|>
ggplot(aes(x=date, y=cases_rate,col=state))+
geom_line()+
facet_wrap(~region_name)+
labs(
title = "Cases per 100,000 by State from 2020 to 2021",
x = "Date",
y = "Cases per 100,000 Population",
color = "State"
)
cases
library(lubridate)
library(knitr)
cases |>
filter(year(date) %in% c(2020, 2021)) |>
mutate(year = year(date)
month = month(date)) |>
library(lubridate)
library(knitr)
cases |>
filter(year(date) %in% c(2020, 2021)) |>
mutate(year = year(date),
month = month(date)) |>
group_by(year,month)|>
summarize(total=sum(cases,na.rm=TRUE))
cases
library(lubridate)
library(knitr)
cases |>
filter(year(date) %in% c(2020, 2021)) |>
mutate(year = year(date),
month = month(date)) |>
group_by(year,month)|>
summarize(total=sum(cases,na.rm=TRUE),
.groups="drop")|>
arrange(year,month)|>
kable()
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api)|>
req_url_query(`$limit` = "10000000000") |>                      #added limit in the query request
req_perform()|>
resp_body_json(cases_raw,simplifyVector = TRUE)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api)|>
req_url_query(`$limit` = "10000000000") |>                      #added limit in the query request
req_perform()|>
resp_body_json(simplifyVector = TRUE)
library(lubridate)
cases<- cases_raw|>
select(state,end_date,new_cases) |>
rename(date=end_date,cases=new_cases) |>                       #rename the columns
mutate(cases=as.numeric(cases),                                #make sure cases are numeric
date = as.Date(date))                                   #as.Date turns into ISO-8061 format
cases
deaths_raw <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE)
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
deaths_raw <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE)
deaths_raw
deaths_raw <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE)
deaths_raw
death <- death_raw|>
select(state,end_date,covid_19_deaths)|>
rename(date=end_date,deatsh=covid_19_deaths)|>
mutate(deaths=as.numeric(deaths),
date=as.Date(date))
deaths_raw <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE)
deaths_raw
death <- deaths_raw|>
select(state,end_date,covid_19_deaths)|>
rename(date=end_date,deatsh=covid_19_deaths)|>
mutate(deaths=as.numeric(deaths),
date=as.Date(date))
deaths_raw <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE)
deaths_raw
death <- deaths_raw|>
select(state,end_date,covid_19_deaths)|>
rename(date=end_date,deaths=covid_19_deaths)|>
mutate(deaths=as.numeric(deaths),
date=as.Date(date))
death
deaths_raw <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE)
death <- deaths_raw|>
select(state,end_date,covid_19_deaths)|>
rename(date=end_date,deaths=covid_19_deaths)|>
mutate(deaths=as.numeric(deaths),
date=as.Date(date))
death
death |>
group_by(state)|>
summarize(total=sum(death),na.rm=TRUE,
n=n())|>
arrange(desc(total))|>
filter(n<=10)
death |>
group_by(state)|>
summarize(total=sum(death,na.rm=TRUE),
n=n())|>
arrange(desc(total))|>
filter(n<=10)
death |>
group_by(state)|>
summarize(total=sum(death,na.rm=TRUE),
n=n(),
.groups="drop")|>
arrange(desc(total))|>
filter(n<=10)
death |>
group_by(state) |>
summarize(total = sum(death, na.rm = TRUE)) |>
arrange(desc(total)) |>
slice_head(n = 10)
death |>
group_by(state) |>
summarize(total = sum(deaths, na.rm = TRUE)) |>
arrange(desc(total)) |>
slice_head(n = 10)
death |>
group_by(state) |>
summarize(total = sum(deaths, na.rm = TRUE)) |>
arrange(desc(total)) |>
slice_head(n = 10) |>
ggplot(aes(x=state,y=death))+
geom_col()
death |>
group_by(state) |>
summarize(total = sum(deaths, na.rm = TRUE)) |>
arrange(desc(total)) |>
slice_head(n = 10) |>
ggplot(aes(x=total,y=death))+
geom_col()
eaths |>
group_by(state) |>
summarize(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
mutate(state = reorder(state, total_deaths)) |>
ggplot(aes(x = total_deaths, y = state)) +
geom_col() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
subtitle = "Cumulative deaths across all available data",
x = "Total Deaths",
y = "State"
)
deaths |>
group_by(state) |>
summarize(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
mutate(state = reorder(state, total_deaths)) |>
ggplot(aes(x = total_deaths, y = state)) +
geom_col() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
subtitle = "Cumulative deaths across all available data",
x = "Total Deaths",
y = "State"
)
death |>
group_by(state) |>
summarize(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
mutate(state = reorder(state, total_deaths)) |>
ggplot(aes(x = total_deaths, y = state)) +
geom_col() +
labs(
title = "Top 10 States by Total COVID-19 Deaths",
subtitle = "Cumulative deaths across all available data",
x = "Total Deaths",
y = "State"
)
death|>
group_by(state)|>
summarize(total=sum(deaths,na.rm=TURE),
.groups="drop")|>
arrange(desc(total))|>
ggplot(aes(x=total,y=state)) +
geom_col()+
labs(
title ="TOP 10 States",
x ="Total Deaths",
y = "State"
)
death|>
group_by(state)|>
summarize(total=sum(deaths,na.rm=TRUE),
.groups="drop")|>
arrange(desc(total))|>
ggplot(aes(x=total,y=state)) +
geom_col()+
labs(
title ="TOP 10 States",
x ="Total Deaths",
y = "State"
)
death|>
group_by(state)|>
summarize(total=sum(deaths,na.rm=TRUE),
.groups="drop")|>
arrange(desc(total))|>
slice_head(n = 10) |>
ggplot(aes(x=total,y=state)) +
geom_col()+
labs(
title ="TOP 10 States",
x ="Total Deaths",
y = "State"
)
rm(list=ls())
## Your code here
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
url <- paste0(
"https://api.census.gov/data/2021/pep/population",
"?get=POP_2020,POP_2021,NAME",
"&for=state:*",
"&key=", census_key
)
population <- resp_body_json(response, simplifyDataFrame = TRUE)
# Perform the request
response <- request %>% req_perform()
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
#population <- population |> ## Use janitor row to names function
# convert to tibble
# remove state column
# rename state column to state_name
# use pivot_longer to tidy
# remove POP_ from year
# parse all relevant columns to numeric
# add state abbreviations using state.abb variable
# use case_when to add abbreviations for DC and PR
population <- population %>%
do.call(rbind, .) %>%                     # bind all inner arrays as rows
as.data.frame(stringsAsFactors = FALSE) %>%
row_to_names(row_number = 1) %>%          # first row becomes header
as_tibble() %>%                           # convert to tibble
rename(state_name = NAME) %>%             # rename state column to state_name
select(-state) %>%                        # remove state column
pivot_longer(                             # use pivot_longer to tidy
cols = starts_with("pop_"),
names_to = "year",
values_to = "population"
) %>%
mutate(
year = str_remove(year, "pop_"),        # remove POP_ from year
year = parse_number(year),              # parse all relevant columns to numeric
population = as.numeric(population),    # parse all relevant columns to numeric
state = case_when(                      # use case_when to add abbreviations for DC and PR
state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)] # add state abbreviations using state.abb variable
)
) %>%
# ensure all columns are atomic
mutate(across(everything(), ~unlist(.)))
